GetSupport(Vector3 originOfForce, float force, int amountOfPolygons) returns the Polygons that are most likely to break out after a Hit. 
The int 'amountOfPolygons' decides, how many Polygons the function returns. Those Polygons are ordered from most likely to least likely. 
Each Polygon must contain originOfForce!

The function therefore calculates the cost of different polygons. Cost is added to a polygon dependend on the area it covers and on the length of cracks, 
that need to be added into wall, to break it out.

There is a special case: the Polygon can consits of 1) a Line that begins at the bottom border of the IDestrucitble and ends at its top border 
and 2) all lines of the border, left or right 1). 


Session 1

	Designing the algorithm


Avoid: checks of possible combinations of too many cracks/holes.

By:
- getting the biggest possible area of the Polygon (its depending on the force)--> Many combinations can be excluded by that.


1a) OR 1b)

1a) 360 rays are send from originOfForce (+ 1Â° for each new ray) and check for cracks
1b) (for i=0, i< maxDependingOfForce, i++) check for cracks in all grids with a distance to originOfForce Grid of i. 

TO

2) order all cracks depending on their (minmal? middled out?) distance to originOfForce. 
3) Take nearest Crack C1 Save its Grid-Distance.
4) Add C1 to alreadyInPolygon
5) check for x cracks closest to C1 check their distance to origin. choose best ratio C2 (sth like: 1 / (y*distanceToC1 + z*distanceToOrigin)) 	//How to choose x,y,z?		C2 must not be in alreadyInPolygon


6) Repeat 4) - 5) for C2 



Problem: C1 could be chosen not optimally. Another crack behind C1 (in relation to the origin) could be nearer to surrounding cracks and therefore have a better ratio.


Session 2

New idea: Represent problem as graph. Find the paths from crack to crack that make sense to use (For example: A-C does not make sense, if A-B-C is smaller).

